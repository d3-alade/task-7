//=====[Libraries]=============================================================

#include "arm_book_lib.h"

#include "bright_control.h"

#include "light_level_control.h"

//=====[Declaration of private defines]========================================

#define LEDS_QUANTITY 3

PwmOut RGBLed[] = {(PB_4), (PA_0), (PD_12)};
static float periodSFloat[LEDS_QUANTITY];

//Declarations (prototypes) of private functions
static void setPeriod( lightSystem_t light, float period );
static void tickerCallbackBrightControl( );

//[Implementations of public functions]

void brightControlInit()
{
     for (int i = 0; i < LEDS_QUANTITY; i++) {
        RGBLed[i].period(0.001f);  // 1 kHz PWM
        RGBLed[i].write(0.0f);     // Start off
    }
}

void setDutyCycle( lightSystem_t light, float dutyCycle )
{
    RGBLed[light].write(dutyCycle); 
}

//Implementations of private functions
static void setPeriod( lightSystem_t light, float period )
{
    periodSFloat[light] = period;
}
#include "arm_book_lib.h"
#include "mbed.h"
#include "smart_home_system.h"
#include "light_level_control.h"

//=====[Declaration of private defines]========================================
#ifdef  _LIGHT_LEVEL_CONTROL_H_
#define _LIGHT_LEVEL_CONTROL_H_

void lightLevelControlInit();
void lightLevelControlUpdate();
float lightLevelControlRead();

#endif

//=====[Declaration of private data types]=====================================

//=====[Declaration and initialization of public global objects]===============

AnalogIn ldrInput(A2);
UnbufferedSerial pc(USBTX, USBRX, 115200);

static float filteredLdrValue = 0.0f;
static const float alpha = 0.1f; // Low-pass filter smoothing factor

//=====[Implementations of public functions]===================================

void lightLevelControlInit() {  pc.write("LDR light level control initialized\r\n", 38);}

void lightLevelControlUpdate() {float raw = ldrInput.read(); // Range: 0.0 â€“ 1.0

    // Exponential moving average filter
    filteredLdrValue = alpha * raw + (1.0f - alpha) * filteredLdrValue;

    // Output to serial
    char buffer[64];
    sprintf(buffer, "Raw: %.3f\tFiltered: %.3f\r\n", raw, filteredLdrValue);
    pc.write(buffer, strlen(buffer)); }

float lightLevelControlRead()
{
    return filteredLdrValue;
}

//=====[Implementations of private functions]==================================#include "arm_book_lib.h"

#include "light_system.h"
#include "bright_control.h"
#include "light_level_control.h"

//=====[Declaration of private defines]========================================

//=====[Declaration of private data types]=====================================

//=====[Declaration and initialization of public global objects]===============

//=====[Declaration and initialization of private global objects]===============

//=====[Declaration of external public global variables]=======================

//=====[Declaration and initialization of public global variables]=============

//=====[Declaration and initialization of private global variables]============

static float dutyCycle = 0.5f;

//=====[Implementations of public functions]===================================

void lightSystemInit()
{
    brightControlInit();
}

void lightSystemUpdate()
{
    dutyCycle = lightLevelControlRead();

    setDutyCycle( RGB_LED_RED, dutyCycle );
    setDutyCycle( RGB_LED_GREEN, dutyCycle );
    setDutyCycle( RGB_LED_BLUE, dutyCycle );

}

//=====[Implementations of private functions]==================================
